{"version":3,"sources":["assets/photo.png","components/Introduction.js","components/Contact.js","components/Projects.js","components/Achievements.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Intro","props","className","src","require","content","name","text","Contact","Projects","Achievements","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iLAAAA,EAAOC,QAAU,IAA0B,mC,kFCc5BC,MAXf,SAAeC,GACX,OAEG,yBAAKC,UAAU,SACX,yBAAKC,IAAKC,EAAQ,MACzB,4BAAKH,EAAMI,QAAQC,MACnB,2BAAIL,EAAMI,QAAQE,QCCPC,MAPf,SAAiBP,GACb,OACI,yBAAKC,UAAU,WAAU,yCCKlBO,MAPf,SAAkBR,GACd,OACI,yBAAKC,UAAU,YAAW,0CCOnBQ,MATf,SAAsBT,GAClB,OACI,yBAAKC,UAAU,gBACX,8CCyBGS,MApBf,WACE,OACE,yBAAKT,UAAU,gBACb,yBAAKA,UAAU,YAChB,kBAAC,EAAD,CAAOG,QAAS,CAChBC,KAAO,kBACPC,KAAO,8TAGN,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCVcK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.20f75fcc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/photo.8bf804cb.png\";","import React from 'react';\r\n\r\n\r\nfunction Intro(props) {\r\n    return (\r\n       \r\n       <div className=\"Intro\">\r\n           <img src={require(\"../assets/photo.png\")}/>\r\n    <h1>{props.content.name}</h1>\r\n    <p>{props.content.text}</p>\r\n    </div>\r\n    \r\n)\r\n}\r\nexport default Intro;","import React from 'react';\r\n\r\n\r\nfunction Contact(props){\r\n    return(\r\n        <div className=\"Contact\"><h1>Contact</h1></div>\r\n        \r\n    )\r\n    \r\n}\r\nexport default Contact;","import React from 'react';\r\n\r\n\r\nfunction Projects(props){\r\n    return(\r\n        <div className=\"Projects\"><h1>Projects</h1></div>\r\n        \r\n    )\r\n    \r\n}\r\nexport default Projects;\r\n","import React from 'react';\r\n\r\n\r\nfunction Achievements(props){\r\n    return(\r\n        <div className=\"Achievements\">\r\n            <h1>Achievements</h1>\r\n        </div>\r\n        \r\n    )\r\n    \r\n}\r\nexport default Achievements;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport Intro from './components/Introduction'\nimport Contact from './components/Contact';\nimport Projects from './components/Projects'\nimport Achievements from './components/Achievements';\n\n\n\n\nfunction App() {\n  return (\n    <div className=\"outerwrapper\">\n      <div className=\"wrapper2\">\n     <Intro content={{ \n     name : \"Abhijith Kannan\",\n     text : \"An undergraduate electrical and electronic engineering student, Microsoft Student Partner 2019-20 whose in the quest to find or make something new thats creative and extraordinary. Being a tech nerd myself, i always love computer technology ,science and infinity. I also make music, love to do vfx and much more.\"\n    \n    }} />\n      <Achievements />\n      <Projects  />\n      <Contact  />\n      </div>\n      \n\n</div>\n  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}